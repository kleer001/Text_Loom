#get the CSS from its locations in the files in the current directory
# extract them to the file theme_css_rules.json
# and extract the variables in them to theme_variables.py
from pathlib import Path
from typing import List, Dict, Set
import re
import json

def extract_component_name(file_content: str, file_stem: str) -> str:
    class_pattern = re.compile(r'class\s+(\w+)\s*\([^)]*\):')
    matches = class_pattern.findall(file_content)
    for match in matches:
        if match.lower() == file_stem.lower() or match.endswith(('Window', 'Screen')):
            return match
    return file_stem.title()

def clean_css_block(css: str) -> str:
    css = css.strip()
    css = css.replace('\r\n', '\n')
    
    # Remove extra nested braces
    css = re.sub(r'{\s*{', '{', css)
    css = re.sub(r'}\s*}', '}', css)
    
    # Clean up theme variables
    css = re.sub(r'{theme\.([A-Z_]+)}\n;', r'{theme.\1};', css)
    
    # Format remaining braces
    css = re.sub(r'\s*{\s*', ' {\n    ', css)
    css = re.sub(r'\s*}\s*', '\n}\n', css)
    
    return css

def extract_css_rules() -> Dict[str, Dict[str, str]]:
    css_blocks = {}
    css_pattern = re.compile(r'DEFAULT_CSS\s*=\s*f?"""(.*?)"""', re.DOTALL)

    for py_file in Path(".").rglob("*.py"):
        try:
            content = py_file.read_text(encoding="utf-8")
            matches = css_pattern.findall(content)
            if matches:
                component_name = extract_component_name(content, py_file.stem)
                component_css = {}
                
                for block_idx, block in enumerate(matches):
                    clean_block = clean_css_block(block)
                    if not any(selector in clean_block for selector in [f"{component_name} ", f"{component_name}{{"]):
                        clean_block = f"{component_name} {{\n    {clean_block}\n}}"
                    
                    clean_block = re.sub(r'{\s*pal\.([A-Z_]+)\s*}', r'{theme.\1}', clean_block)
                    component_css[f"{component_name}-{block_idx}"] = clean_block
                
                css_blocks[component_name] = component_css

        except Exception as e:
            print(f"Error processing {py_file}: {e}")

    return css_blocks

def extract_variables(css: str) -> Set[str]:
    pattern = re.compile(r"\{(?:pal|theme)\.([A-Z][A-Z_]+)\}")
    return set(pattern.findall(css))

def extract_theme_variables() -> Set[str]:
    variables = set()
    css_pattern = re.compile(r'DEFAULT_CSS\s*=\s*f?"""(.*?)"""', re.DOTALL)
    
    for py_file in Path(".").rglob("*.py"):
        try:
            content = py_file.read_text(encoding="utf-8")
            matches = css_pattern.findall(content)
            for css in matches:
                variables.update(extract_variables(css))
        except Exception as e:
            print(f"Error processing {py_file}: {e}")
            
    return variables

def generate_theme_files():
    from random import randint
    css_rules = extract_css_rules()
    variables = extract_theme_variables()
    
    with open("theme_variables.py", "w") as f:
        f.write("# Theme Variables - Template\n\n")
        for var in sorted(variables):
            color = f"#{randint(0,0xFFFFFF):06x}"
            f.write(f"{var} = '{color}'  # Random default\n")
            
    with open("theme_css_rules.json", "w") as f:
        json.dump(css_rules, f, indent=2)

# Test code to verify extraction
if __name__ == "__main__":

    generate_theme_files()